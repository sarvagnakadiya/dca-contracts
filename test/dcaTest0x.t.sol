// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.29;

import {Test, console} from "forge-std/Test.sol";
import {DCAForwarder} from "../src/DCA.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract DCAExecutorTest is Test {
    DCAForwarder public dcaForwarder;
    IERC20 public usdc;
    IERC20 public xrp;
    address public user = 0xEA380ddC224497dfFe5871737E12136d3968af15;
    address public admin = 0xbFc4A28D8F1003Bec33f4Fdb7024ad6ad1605AA8;

    // Token addresses
    address public fromToken = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913; // USDC on Base
    address public toToken = 0xcbADA732173e39521CDBE8bf59a6Dc85A9fc7b8c; // USDbC on Base
    uint256 public amount = 20000000; // 20 USDC (6 decimals)

    // 1inch swap data
    bytes public oneInchData =
        hex"1fff991f0000000000000000000000006d3f8196d8f84e0961528451f3981687fd520090000000000000000000000000cbada732173e39521cdbe8bf59a6dc85a9fc7b8c000000000000000000000000000000000000000000000000000000000016a75c00000000000000000000000000000000000000000000000000000000000000a047867ba6c602d4f6684952800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000012438c9c147000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000ad01c20d5886137e056775af56915de824c8fce50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c833589fcd6edb6e08f4c7c32d4f71b54bda02913010001f4cbada732173e39521cdbe8bf59a6dc85a9fc7b8c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064c876d21d000000000000000000000000f5c4f3dc02c3fb9279495a8fef7b0741da956157000000000000000000000000cbada732173e39521cdbe8bf59a6dc85a9fc7b8c000000000000000000000000000000000000000000000000000000000016f1b500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffc1fb425e000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000006e898131631616b1779bad70bd62000000000000000000000000000000000000000000000000000000006870345200000000000000000000000000000000000000000000000000000000000000c0";

    function setUp() public {
        dcaForwarder = DCAForwarder(
            payable(0x6D3f8196d8F84e0961528451f3981687FD520090)
        );

        // initialize usdc
        usdc = IERC20(fromToken);
        xrp = IERC20(toToken);

        // assertEq(usdc.balanceOf(user), amount);
        vm.startPrank(user);
        usdc.approve(address(dcaForwarder), amount);
        assertEq(usdc.allowance(user, address(dcaForwarder)), amount);
        vm.stopPrank();
    }

    function test_executeSwap() public {
        vm.prank(admin);
        dcaForwarder.executeSwap(user, fromToken, toToken, amount, oneInchData);
        vm.stopPrank();
        console.log(
            "USDC balance of user after swap: %s",
            usdc.balanceOf(user)
        );
        console.log(
            "USDC balance of dcaForwarder after swap: %s",
            usdc.balanceOf(address(dcaForwarder))
        );
        console.log("XRP balance of user after swap: %s", xrp.balanceOf(user));
        console.log(
            "XRP balance of dcaForwarder after swap: %s",
            xrp.balanceOf(address(dcaForwarder))
        );
    }
}
