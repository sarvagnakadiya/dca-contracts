// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.29;

import {Test, console} from "forge-std/Test.sol";
// import {DCAForwarder} from "../src/DCA.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract DCAExecutorTest is Test {
    IERC20 public usdc;
    IERC20 public xrp;
    address public user = 0xEA380ddC224497dfFe5871737E12136d3968af15;
    address public referrer = 0xE3ebcf8ef7AD377ece3AeABD25Ba09b2b8F2641B;
    address public admin = 0xbFc4A28D8F1003Bec33f4Fdb7024ad6ad1605AA8;
    address public oneInchRouter = 0xf525fF21C370Beb8D9F5C12DC0DA2B583f4b949F;

    // Token addresses
    address public fromToken = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913; // USDC on Base
    address public toToken = 0xcbADA732173e39521CDBE8bf59a6Dc85A9fc7b8c; // USDbC on Base
    uint256 public amount = 20000000; // 20 USDC (6 decimals)
    uint256 public amountRound = 2000000; // 2 USDC (6 decimals)

    // 1inch swap data
    bytes public oneInchData =
        hex"1fff991f000000000000000000000000ea380ddc224497dffe5871737e12136d3968af15000000000000000000000000cbada732173e39521cdbe8bf59a6dc85a9fc7b8c0000000000000000000000000000000000000000000000000000000000161a1200000000000000000000000000000000000000000000000000000000000000a08b6843cd4cc9b1dc8fd641f60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000012438c9c147000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000ad01c20d5886137e056775af56915de824c8fce500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014438c9c147000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000271000000000000000000000000035e37d0b4960141740135e0742579aefe5f9d598000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000006499da9d6b000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014438c9c1470000000000000000000000004e74d4db6c0726ccded4656d0bce448876bb4c7a000000000000000000000000000000000000000000000000000000000000271000000000000000000000000035e37d0b4960141740135e0742579aefe5f9d598000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000646c8d21fc000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f00000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c4200000000000000000000000000000000000006010001f4cbada732173e39521cdbe8bf59a6dc85a9fc7b8c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064c876d21d000000000000000000000000f5c4f3dc02c3fb9279495a8fef7b0741da956157000000000000000000000000cbada732173e39521cdbe8bf59a6dc85a9fc7b8c0000000000000000000000000000000000000000000000000000000000169aed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffc1fb425e000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000006e898131631616b1779bad70bcec000000000000000000000000000000000000000000000000000000006870351f00000000000000000000000000000000000000000000000000000000000000c0";

    function setUp() public {
        // initialize usdc
        usdc = IERC20(fromToken);
        xrp = IERC20(toToken);

        // give approval of tokens to 1inch router
        vm.startPrank(user);
        usdc.approve(oneInchRouter, amount);
        vm.stopPrank();
        console.log(
            "USDC allowance of user: %s",
            usdc.allowance(user, oneInchRouter)
        );
    }

    // function test_executeSwapLoop() public {
    //     console.log(
    //         "USDC balance of user before swap: %s",
    //         usdc.balanceOf(user)
    //     );
    //     console.log(
    //         "USDC balance of referrer before swap: %s",
    //         usdc.balanceOf(referrer)
    //     );
    //     console.log("XRP balance of user before swap: %s", xrp.balanceOf(user));

    //     vm.prank(admin);
    //     for (uint256 i = 0; i < 10; i++) {
    //         // Execute the swap via 1inch router
    //         (bool success, ) = oneInchRouter.call(oneInchData);
    //         require(success, "1inch swap failed");
    //     }
    //     console.log(
    //         "USDC balance of user after swap: %s",
    //         usdc.balanceOf(user)
    //     );
    //     console.log("XRP balance of user after swap: %s", xrp.balanceOf(user));
    //     vm.stopPrank();
    // }
    function test_executeSwap3() public {
        console.log(
            "USDC allowance of user: %s",
            usdc.allowance(user, oneInchRouter)
        );

        console.log(
            "USDC balance of user before swap: %s",
            usdc.balanceOf(user)
        );
        console.log(
            "USDC balance of referrer before swap: %s",
            usdc.balanceOf(referrer)
        );
        console.log("XRP balance of user before swap: %s", xrp.balanceOf(user));
        vm.prank(user);
        // Execute the swap via 1inch router
        (bool success, ) = oneInchRouter.call(oneInchData);
        require(success, "1inch swap failed");
        console.log(
            "USDC balance of user after swap: %s",
            usdc.balanceOf(user)
        );
        console.log("XRP balance of user after swap: %s", xrp.balanceOf(user));
        vm.stopPrank();
    }
}
