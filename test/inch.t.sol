// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.29;

import {Test, console} from "forge-std/Test.sol";
// import {DCAForwarder} from "../src/DCA.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract DCAExecutorTest is Test {
    IERC20 public usdc;
    IERC20 public xrp;
    address public user = 0xEA380ddC224497dfFe5871737E12136d3968af15;
    address public referrer = 0xE3ebcf8ef7AD377ece3AeABD25Ba09b2b8F2641B;
    address public admin = 0xbFc4A28D8F1003Bec33f4Fdb7024ad6ad1605AA8;
    address public oneInchRouter = 0x111111125421cA6dc452d289314280a0f8842A65;

    // Token addresses
    address public fromToken = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913; // USDC on Base
    address public toToken = 0x9Cb41FD9dC6891BAe8187029461bfAADF6CC0C69; // USDbC on Base
    uint256 public amount = 20000000; // 20 USDC (6 decimals)
    uint256 public amountRound = 2000000; // 2 USDC (6 decimals)

    // 1inch swap data
    // bytes public oneInchData =
    //     "0x07ed23790000000000000000000000006ea77f83ec8693666866ece250411c974ab962a8000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000cbada732173e39521cdbe8bf59a6dc85a9fc7b8c0000000000000000000000006ea77f83ec8693666866ece250411c974ab962a8000000000000000000000000ea380ddc224497dffe5871737e12136d3968af150000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000046a1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000025000000000000000000000000000000000000000000000023200020400004e00a0744c8c09833589fcd6edb6e08f4c7c32d4f71b54bda0291390cbe4bdd538d6e9b379bff5fe72c3d67a521de5000000000000000000000000000000000000000000000000000000000000025800a0c9e75c480000000000000000060400000000000000000000000000000000000000000000000000018800006302a0000000000000000000000000000000000000000000000000000000000001c3d4ee63c1e581395340b92672ba1c7b73bbd24c2573ad60419619833589fcd6edb6e08f4c7c32d4f71b54bda02913111111125421ca6dc452d289314280a0f8842a6500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f02a0000000000000000000000000000000000000000000000000000000000001bbf2ee63c1e50188492051e18a65fe00241a93699a6082ae95c828833589fcd6edb6e08f4c7c32d4f71b54bda0291302a0000000000000000000000000000000000000000000000000000024b9170a8be6ee63c1e5007ddd5fc2588d58c0ebc7e8cfd3d94ee34cf85b23d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca02a0000000000000000000000000000000000000000000000000000000000002a648ee63c1e581b862f23ba38c8c65e256782b31e8c08c9aefd6124200000000000000000000000000000000000006111111125421ca6dc452d289314280a0f8842a650020d6bdbf78cbada732173e39521cdbe8bf59a6dc85a9fc7b8c111111125421ca6dc452d289314280a0f8842a650000000000000000000000000000000096605042";
    bytes public oneInchData =
        hex"07ed23790000000000000000000000006ea77f83ec8693666866ece250411c974ab962a8000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000009cb41fd9dc6891bae8187029461bfaadf6cc0c690000000000000000000000006ea77f83ec8693666866ece250411c974ab962a8000000000000000000000000ea380ddc224497dffe5871737e12136d3968af1500000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000002aa59ad6c54966641af00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000036500000000000000000000000000000000000000000000034700031900008200a07225b0d0833589fcd6edb6e08f4c7c32d4f71b54bda02913e3ebcf8ef7ad377ece3aeabd25ba09b2b8f2641b0000000000000000000000000000000000000000000000000000000000009c4090cbe4bdd538d6e9b379bff5fe72c3d67a521de5000000000000000000000000000000000000000000000000000000000000177000a007e5c0d200000000000000000000000000000000000000000000000000027300021000a007e5c0d20000000000000000000000000000000000000000000000000001ec0000b05121000000000022d473030f116ddee9f6b43ac78ba3833589fcd6edb6e08f4c7c32d4f71b54bda02913004487517c45000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000076578ecf9a141296ec657847fb45b0585bcda3a600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412076578ecf9a141296ec657847fb45b0585bcda3a60064750283bc0000000000000000000000007b4c560f33a71a9f7a500af3c4c65b46fbbafdb7000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021c87cab02403000000000000000000000000000000000000000000000000000000006879f34600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000002aa59ad6c54966641afee63c1e5819ea86aa9f7203da077371bb2f82ec555e6e22f814200000000000000000000000000000000000006111111125421ca6dc452d289314280a0f8842a650020d6bdbf789cb41fd9dc6891bae8187029461bfaadf6cc0c69111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000096605042";

    function setUp() public {
        // initialize usdc
        usdc = IERC20(fromToken);
        xrp = IERC20(toToken);

        // give approval of tokens to 1inch router
        vm.startPrank(user);
        usdc.approve(oneInchRouter, amount);
        vm.stopPrank();
        console.log(
            "USDC allowance of user: %s",
            usdc.allowance(user, oneInchRouter)
        );
    }

    // function test_executeSwapLoop() public {
    //     console.log(
    //         "USDC balance of user before swap: %s",
    //         usdc.balanceOf(user)
    //     );
    //     console.log(
    //         "USDC balance of referrer before swap: %s",
    //         usdc.balanceOf(referrer)
    //     );
    //     console.log("XRP balance of user before swap: %s", xrp.balanceOf(user));

    //     vm.prank(admin);
    //     for (uint256 i = 0; i < 10; i++) {
    //         // Execute the swap via 1inch router
    //         (bool success, ) = oneInchRouter.call(oneInchData);
    //         require(success, "1inch swap failed");
    //     }
    //     console.log(
    //         "USDC balance of user after swap: %s",
    //         usdc.balanceOf(user)
    //     );
    //     console.log("XRP balance of user after swap: %s", xrp.balanceOf(user));
    //     vm.stopPrank();
    // }
    function test_executeSwap2() public {
        console.log(
            "USDC allowance of user: %s",
            usdc.allowance(user, oneInchRouter)
        );

        console.log(
            "USDC balance of user before swap: %s",
            usdc.balanceOf(user)
        );
        console.log(
            "USDC balance of referrer before swap: %s",
            usdc.balanceOf(referrer)
        );
        console.log("XRP balance of user before swap: %s", xrp.balanceOf(user));
        vm.prank(user);
        // Execute the swap via 1inch router
        (bool success, ) = oneInchRouter.call(oneInchData);
        require(success, "1inch swap failed");
        console.log(
            "USDC balance of user after swap: %s",
            usdc.balanceOf(user)
        );
        console.log("XRP balance of user after swap: %s", xrp.balanceOf(user));
        vm.stopPrank();
    }
}
